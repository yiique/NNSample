I1693
.F1669.55033346013
.F7.4e-323
.ccopy_reg
_reconstructor
p0
(ctheano.tensor.sharedvar
TensorSharedVariable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'auto_name'
p6
S'auto_19848'
p7
sS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(lp14
(S'DNNreasoner.py'
p15
I204
S'<module>'
p16
S'dnnreasoner = DNNreasoner()'
p17
tp18
a(S'DNNreasoner.py'
p19
I40
S'__init__'
p20
S'self.initialize()'
p21
tp22
a(S'DNNreasoner.py'
p23
I85
S'initialize'
p24
S'self.weight_layer1 = theano.shared(numpy.random.uniform(-1.0, 1.0, (self.ni, self.ni)))'
p25
tp26
aasbsS'container'
p27
g0
(ctheano.gof.link
Container
p28
g2
Ntp29
Rp30
(dp31
S'name'
p32
NsS'storage'
p33
(lp34
cnumpy.core.multiarray
_reconstruct
p35
(cnumpy
ndarray
p36
(I0
tp37
S'b'
p38
tp39
Rp40
(I1
(I2
I2
tp41
cnumpy
dtype
p42
(S'f8'
p43
I0
I1
tp44
Rp45
(I3
S'<'
p46
NNNI-1
I-1
I0
tp47
bI00
S'\xa0(^\x9fr\xc8\xe2\xbf\x82\xe1\x8bK\xf2\xec\xc0\xbf\x1b[\x0b\x83\x94!\xe5?\x85\xfc\x1f\xbf\xd2A\xc4\xbf'
p48
tp49
basS'strict'
p50
I00
sS'readonly'
p51
I00
sS'type'
p52
g0
(ctheano.tensor.type
TensorType
p53
g2
Ntp54
Rp55
(dp56
S'broadcastable'
p57
(I00
I00
tp58
sS'dtype'
p59
S'float64'
p60
sS'numpy_dtype'
p61
g45
sS'sparse_grad'
p62
I00
sg32
NsbsS'allow_downcast'
p63
Nsbsg32
NsS'owner'
p64
Nsg52
g55
sb.ccopy_reg
_reconstructor
p0
(ctheano.tensor.sharedvar
TensorSharedVariable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'auto_name'
p6
S'auto_19849'
p7
sS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(lp14
(S'DNNreasoner.py'
p15
I204
S'<module>'
p16
S'dnnreasoner = DNNreasoner()'
p17
tp18
a(S'DNNreasoner.py'
p19
I40
S'__init__'
p20
S'self.initialize()'
p21
tp22
a(S'DNNreasoner.py'
p23
I86
S'initialize'
p24
S'self.bias_layer1 = theano.shared(numpy.zeros([self.ni, self.di], dtype=theano.config.floatX))'
p25
tp26
aasbsS'container'
p27
g0
(ctheano.gof.link
Container
p28
g2
Ntp29
Rp30
(dp31
S'name'
p32
NsS'storage'
p33
(lp34
cnumpy.core.multiarray
_reconstruct
p35
(cnumpy
ndarray
p36
(I0
tp37
S'b'
p38
tp39
Rp40
(I1
(I2
I20
tp41
cnumpy
dtype
p42
(S'f8'
p43
I0
I1
tp44
Rp45
(I3
S'<'
p46
NNNI-1
I-1
I0
tp47
bI00
S'\xa2\xc0\x171U\x1f\xbc\xbf\xd0v\x13*>y\xce\xbf&\xdf\x0f\xd3JL\xc4?\xefd\xb6\xdb\xfb%\xc2?\x86[\xf2\x8dR\xfc\xac\xbf\xad\xc7\xc4\xa8\x8c\xc4`?)\xd4\xc0\x93\xd4\xf9\xac?\x8f\xf9\x19\xc1y\xac\x96\xbf7\xd5)\xbb\x9e\xe6\xbc?l\xa5\xe3\x95/E\xac\xbf\xe6<\x7f\xea\x821\xad\xbfN\t\xa10\x87+\xa7?\xdetp\xf7\x84T\xc5?\xd8\xaa\x1az\xc0\x03\xb4\xbf\xdd\xb1\xf4\x85\x8c\xb72?\xb8%bE?z\xcd?D\xbc\x07L-`\xab?\x8b\xd9\x16cl\xe8\xcf\xbf\xd1\x01h:\x9cr\x84?g\xf5nV\xc4\xcb\xb3\xbf\xc4\xdcO\xae\x8a\xe8\xb0\xbf?`.\xd3_\xb8\xc4\xbf\xe5\xb4\xc2\x8a\x80\x11\xba?5\\\xc6S\\\xf0\xb8?P,[\x10\xfc\x98\x9f\xbf|\xe4\xe6\xe5\xfc\xe1\x85\xbf:(\xda-]\xc2\x97?L\xfb\x17\xb58\xbf\x81?\x96\xad\xe9\xc5\xd4\x98\xb6?\xe0@\xc0\xeb=>\xa0\xbf\x15\xc2_\xab\\i\xa6\xbf\xf3\xd5\xe9\xcbAI\xa1?\xe3\xb6\xf1\x1e\x943\xc0?nL`\x15\x1f\xcf\xa5\xbfwW\xacA\x94\xddp?\x89@;\x9f\xe7\x00\xc8?\x84n\xe3\n(\xea\xa2?`P\t\x12\x934\xc4\xbf\xc3\x06\r[\nA\x81?-\xdaVf\xca\x08\xab\xbf'
p48
tp49
basS'strict'
p50
I00
sS'readonly'
p51
I00
sS'type'
p52
g0
(ctheano.tensor.type
TensorType
p53
g2
Ntp54
Rp55
(dp56
S'broadcastable'
p57
(I00
I00
tp58
sS'dtype'
p59
S'float64'
p60
sS'numpy_dtype'
p61
g45
sS'sparse_grad'
p62
I00
sg32
NsbsS'allow_downcast'
p63
Nsbsg32
NsS'owner'
p64
Nsg52
g55
sb.ccopy_reg
_reconstructor
p0
(ctheano.tensor.sharedvar
TensorSharedVariable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'auto_name'
p6
S'auto_19850'
p7
sS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(lp14
(S'DNNreasoner.py'
p15
I204
S'<module>'
p16
S'dnnreasoner = DNNreasoner()'
p17
tp18
a(S'DNNreasoner.py'
p19
I40
S'__init__'
p20
S'self.initialize()'
p21
tp22
a(S'DNNreasoner.py'
p23
I87
S'initialize'
p24
S'self.weight_layer2 = theano.shared(numpy.random.uniform(-1.0, 1.0, (self.ni, self.ni)))'
p25
tp26
aasbsS'container'
p27
g0
(ctheano.gof.link
Container
p28
g2
Ntp29
Rp30
(dp31
S'name'
p32
NsS'storage'
p33
(lp34
cnumpy.core.multiarray
_reconstruct
p35
(cnumpy
ndarray
p36
(I0
tp37
S'b'
p38
tp39
Rp40
(I1
(I2
I2
tp41
cnumpy
dtype
p42
(S'f8'
p43
I0
I1
tp44
Rp45
(I3
S'<'
p46
NNNI-1
I-1
I0
tp47
bI00
S'GP;\x8f\x82\xd8\xf3\xbf\x14\xa3\xadUw\x19\xe2\xbf>\xa3\x0e\x9a\x15\x03\xe7?\xe04d\xf1Yi\xa0\xbf'
p48
tp49
basS'strict'
p50
I00
sS'readonly'
p51
I00
sS'type'
p52
g0
(ctheano.tensor.type
TensorType
p53
g2
Ntp54
Rp55
(dp56
S'broadcastable'
p57
(I00
I00
tp58
sS'dtype'
p59
S'float64'
p60
sS'numpy_dtype'
p61
g45
sS'sparse_grad'
p62
I00
sg32
NsbsS'allow_downcast'
p63
Nsbsg32
NsS'owner'
p64
Nsg52
g55
sb.ccopy_reg
_reconstructor
p0
(ctheano.tensor.sharedvar
TensorSharedVariable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'auto_name'
p6
S'auto_19851'
p7
sS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(lp14
(S'DNNreasoner.py'
p15
I204
S'<module>'
p16
S'dnnreasoner = DNNreasoner()'
p17
tp18
a(S'DNNreasoner.py'
p19
I40
S'__init__'
p20
S'self.initialize()'
p21
tp22
a(S'DNNreasoner.py'
p23
I88
S'initialize'
p24
S'self.bias_layer2 = theano.shared(numpy.zeros([self.ni, self.di], dtype=theano.config.floatX))'
p25
tp26
aasbsS'container'
p27
g0
(ctheano.gof.link
Container
p28
g2
Ntp29
Rp30
(dp31
S'name'
p32
NsS'storage'
p33
(lp34
cnumpy.core.multiarray
_reconstruct
p35
(cnumpy
ndarray
p36
(I0
tp37
S'b'
p38
tp39
Rp40
(I1
(I2
I20
tp41
cnumpy
dtype
p42
(S'f8'
p43
I0
I1
tp44
Rp45
(I3
S'<'
p46
NNNI-1
I-1
I0
tp47
bI00
S'\xf9\xa4-\x92d\x87\xcf?\xf3\xf5\x04\x90xf\xde?\x05\xb9#|]$\xde\xbf\xf9Pi&\xc9\xb1\xd7\xbf1a,\xdd\xc0\xe9\xb6?\xf0\xe9\x9d)\x19\xa6\xbd\xbf_\xd4eZdl\xc7\xbf\xf5&3\x00\x85\xc9\xc0?\x9bV\xad\xbc\xf9\x9c\xd2\xbf]a\xf8\xd1\x08G\xc0?\xc4\xacT\x07\xddr\xa3?\xf0\x0b\xf3.\xc1\x8c\xc1\xbf\x85p\xa3\x01\x1c\xee\xd7\xbf\x05\xe8"\xcf\xcfu\xcb?\xd8_\xcd\rP\x83\x8f?\x04\xf8\xba\xe9\x1c\xc5\xdd\xbf\xa7\xcc\x8c\xda\xfef\xc6\xbf\xc2\xa1\x88\x1bt\xe0\xe2?-[\xa8\xa6\x8bS\x8c\xbf\x80\'_\x1cu1\xbb?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
p48
tp49
basS'strict'
p50
I00
sS'readonly'
p51
I00
sS'type'
p52
g0
(ctheano.tensor.type
TensorType
p53
g2
Ntp54
Rp55
(dp56
S'broadcastable'
p57
(I00
I00
tp58
sS'dtype'
p59
S'float64'
p60
sS'numpy_dtype'
p61
g45
sS'sparse_grad'
p62
I00
sg32
NsbsS'allow_downcast'
p63
Nsbsg32
NsS'owner'
p64
Nsg52
g55
sb.ccopy_reg
_reconstructor
p0
(ctheano.tensor.sharedvar
TensorSharedVariable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'auto_name'
p6
S'auto_19852'
p7
sS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(lp14
(S'DNNreasoner.py'
p15
I204
S'<module>'
p16
S'dnnreasoner = DNNreasoner()'
p17
tp18
a(S'DNNreasoner.py'
p19
I40
S'__init__'
p20
S'self.initialize()'
p21
tp22
a(S'DNNreasoner.py'
p23
I89
S'initialize'
p24
S'self.weight_layer3 = theano.shared(numpy.random.uniform(-1.0, 1.0, (self.nc, self.di)))'
p25
tp26
aasbsS'container'
p27
g0
(ctheano.gof.link
Container
p28
g2
Ntp29
Rp30
(dp31
S'name'
p32
NsS'storage'
p33
(lp34
cnumpy.core.multiarray
_reconstruct
p35
(cnumpy
ndarray
p36
(I0
tp37
S'b'
p38
tp39
Rp40
(I1
(I10
I20
tp41
cnumpy
dtype
p42
(S'f8'
p43
I0
I1
tp44
Rp45
(I3
S'<'
p46
NNNI-1
I-1
I0
tp47
bI00
S'P$Pc\x15\xd5\xf2?_\xf0\x94;uK\xdc?Y\xc33k\xa0\xfe\xdc\xbf\xff\xdc\xad6\xd6\xb1\xcc\xbf\xbc\xb7\x04\xfc\xe0%\xd8?\x04\x96L\x8b\xbb\xe1\xcb?\xcb*P\xec\x9bc\xe5?@\xe9\xd3\n;\xb9\xb4?9h\xd3\xe4k8\xd7\xbf\x1b\x99\x0c\xf7\x19\xa1\xd5?\xf4\xf1@z\xbe#\xd3?T\xffz\x89\xfe\xa9\xf4?\x13\r\xd3G\xb8\xe6\xeb?\x92\xf3\xbc\x8bu\x01\xe5?8\x18oF\xb5\xc9\xd8?iQx\xed\xde\x0f\xe1\xbf\xc4 Ay\x9a\xfd\xd0\xbf\x9e\xe7\x87\xe9\xfa\xa2\xd2?_\xc9\xa2\x87\x98\x92\xd4\xbfM!x\xdd\x84\xcf\xdd\xbf\xab\x9b\xba$\x9f\x1f\xe6?\xa07A;\x8a\xd2\xb0?:q`L>\xb0\xe0\xbf\xac\xc8\xca>n\x9b\xa7\xbf~\xe6\x84^\x02k\xd1?\xbe\x8d7\xcc\xe88\xe0\xbfr|\x95\xe9 \x88\xb7?\xf6wS\xeb\xd6\xb8\xe7?\xc1\xc0\xdb\x9e\xe0\x95\xd0?d\xd2\xfa!\xe0\x96\xd7?\xa9\x05/\xb1\x99\xfa\xc7\xbf\xbc\x80,h\xe6[\xb5?\xd5\xe8p2\x8f\x9b\xce?\x02\x87\'\x06\xed\xf2\xe2?\xdf5+pof\xec?\x81\xbfP\xb5\x1d\xc0\xe0?\x88\x81\x01|\xf8\x9c\xd3\xbf\x19\x98e>\xbdK\xec?3B\xf9y\xf1\xc8\xe1?\xaf\x92\xe0\xb0\x96R\xb1\xbfx\xc3\xb1\xb5|\xdb\xc1\xbf\x0e?}\xbb7!\xea\xbf|\xed\x91\xec}\x97\xd0\xbf\xf8\xeeUu\x91\xd7\xed?0$0\xb4Z\xe9\xbb\xbfF\xd9\x1fx\\\x87\xe5\xbf|\x98\xf1\xd1R\xa9\xe8?\xde\x06"/nS\xe4?\x8c1j\x93\xc6\\\xd6\xbf\xf8-\x85\xfa\\w\xd0\xbf\x10\xb3\xc3\xd8\xe3\xe8\xba?\xcc\xbb.y\xe8\x8a\xda?\xd6v\x10A\x08\xf8\xe2\xbf4v`\xe6\x95s\xe7\xbf\xd8\xcaCs\xda-\xe9\xbf\x0c\xcf\xfc\xb4\xd2\xac\xeb\xbfjh\x91p\xf5\xff\xed\xbf2\xdf\x8f\xe3\x954\xe8?\xe4\xa9\xe1}F\xfe\xed?\xd09Ft\xad\xd1\xea?\xd5g\xec?-\xa4\xc2?\xc9\xce\xfff\xed\x13\xe3?) \\\xff\xc7\xdf\xef?RSkOk\xf5\xe6?\xa4\xe2\xcc\xa4\x1c\xd0\xbc?\x8d\xdb5\x0f>8\xe9?a\xa3\x0c\xbf\x18\x1d\xeb?\xaf\n\xb1\x0c\xaf\x8a\xd8\xbf\xbdMl\xe1\x8a\xdc\xf0?}#U\x88\xdf\xc3\xe2\xbf\xde]\xdd\xeal=\xea?\xa6u\xe0\x8c\xba\x0c\xe8?\x83\xd5\x0c\xf3-\xf3\xe4?r\x10K>\\3\xd1\xbf\xf2lb\'P\xcf\xde?6Q"\xd4WF\xe5\xbf\xd0B8\xd8u+\xc9\xbf\xe3qw\xb4\x16\xd8\xe3?t\x9e(7\x9a\xa0\xe3?\x81\xa5^\xbdrm\xe1?\xad)86\xa0\xd3\xcf\xbf\xfa+\xf7s\xe0\xfd\xea?\xed\xcb\xec*\xd6\x15\xe5?\x06z\x98\xa9\x98\xf6\xb0\xbf\xc0\xaa(N\x9dd\xf1?c\xfdx\xa7x\n\xd0\xbf\xd6{Eo\xa7\x9e\xe3\xbf\xa6v\xa4{%\xee\xf0?=c\xe9.^q\xb4?\xf18Z\xfcA\x8f\xf2?\xf4\xd1\xc1\xfc\xa4\x0f\xd8\xbf\x8e\xc2\xa4\xa4\x87\x03\xdc?l\n$\x93\x12\xaa\xe7\xbfX\x1fQ\x8f\x8e\x8b\xd5\xbfm\xc1\xc77U5\xe3?\x94\xdbbtg\x7f\xad\xbf?\xb9\x1cQ\x96[\xe5?R\xd5\xb6\xb5=\x08\xe9?2\xac1\x9f.\xe2\xe1?\xf6\xa5WNQ\x90\xcc?Y\xb6K)\xdeS\xf2?\xccp\x98a\xb4\xf0\xe3?K\x836\x89\x93\xa0\xae\xbf\x91\xeb\r\xce\xb0\x1b\xb0\xbfX\x1e\xd5\xe5\x85\xcd\xec?\x9e\xd3\xaf\xd3\xdb\x18\xdf?\x08\xc0\xd15\x8a\xaf\xda?SE\x9c\x1c\x04\xc7\xd2\xbf)\xb3W\x8a\xbe\xe1\xea\xbf\x80\x0f~\xb7[\xe0\xe6?lZ\xf34\xa9\xdc\xef?3\xbdka(T\xc0\xbf\xbd\xc67\xd9\xc0\n\xea\xbf\x15W\x04\'}\xff\xe3?\x15\x877\x8dR\x1a\xea?\xd5\xd3\xc5\x1b\x0c\xe4\xa1?\x98:W\xb3\x97\xcc\xe8?{\xc5\x9a\xab\xcb^\xf2?tcx\xccp<\xe3\xbf\xef\xe8<"Sl\xe0?Q\xa7A\xe8\xb1\xa2\x9e?\xe4T\xa1\xc7,\xb9\xee\xbfm\xce\x05Ej\xe2\xdf?F\xa73\xe4\xde\xd3\xec?pD\xae\xa0\xdf9\xe9?\x80\x8aR\xf4\x11\xb4\xdd?\xbe \xb5\xbb\xa7\xd5\xd9?1]\x95L\xe6\x83\xd1\xbf\x81\xc4\x13\x14\xe8\xc1\xe8?\x03F\xfb\x08Bg\xd0\xbf\x1a#\xe8;\x87G\xea?\x1a\xddr3g \xd0\xbf\xaf\xcdi\xd7.\x8e\xcc?\xd6`\x93\x0f+\x04\xdb?e\xddh\xb9\x02&\xd0?\xe3R\xa4\xbb\xef\x9c\xe3?u\xd4\xd3\xd2\x8d%\xe1\xbf4\xd7`\xc14\x97\xda\xbf?\xb8\xb1Y\xc5\x01p\xbf\x8f\x91\xa6\x89\xe9\xc0\xe7\xbf\xb9VUC\x9fX\xdc?\x87^\xb8U\xd4N\xcc?Ssyd\x90\xe7\xd8?\x98\xea\xf8\x9cN=\xe0?{\xe7\xcb\x93\xdc\xb1\xc5\xbf\xff!,\xed\xdd4\xf4?r\xcb\xbb\xdc\x82\xb2\xda\xbf\xe6\x93gI"a\xba?\xb2\x9f\x07l\xc1}\xe5?<5\xce\xf3\xb0\x0c\xf1?\x11\xc1\xde\xebE\xa0\xd1?\x12\xb6u\xa3\x838\xd3\xbf\xad\xeb\xa4z\x80\x1b\xab\xbf?P\xb8\xd2\x88\xcd\xcd?\x83\xabDSk{\xdb\xbf\xc2t\x82q\xbe\xe3\xe4?\xe7\x85\xc6/%\x9b\xec?\xf2\xd7\x89\rh{\xd7\xbf\x0b\xfb\x84\xaa\xc9E\xe3?\xb9\x18<\xbc\x06\xf1\xe2?\xe5&W/N\x15\xd8\xbf\x1d\x97\xb0s\x85(\xf3?\x82\xebk\xa2\xfb\xb1\xb7?s\xd8M\xed\xdb\x80\xc7\xbf\x94\xb7Y\x8e\x8a\xa7\xe6?\xc6\x16\x94\xaf\xf5E\xe1?\xa7\x13{b\t\x94\xe0?-\xa6\x85p\'>\xa3\xbf\x97e\x9d0\nb\xe3?o5\x91\xb1\xed\xf2\xc6?YaI\xb0\xa9\x0f\xf3?\x91h\x0b62?\xda\xbf\x9f\xf0T\xba\x17\xf2\xe0?Hi\x85\xef\xff\x0f\xe6?\xa2\xb6!\x1a>\x8f\xcc?\x15\xf5\x1c\x87\xb5\xe1\xe5\xbfM\xcbj\xebA\x7f\xe0\xbf\x04V\x96+\xca\xcd\xe4?\x7f\\\x9bzs\xc3\x82\xbf\x94\x96\xff0w\x82\xe9?\xa5\x1bc\xe2\x93$\xdc? sEP\x8am\xee?e\x03\x00\xb3\xf3\xfb\xde\xbf\xe2u\x16A\x02\xd5\xc3\xbfIr\xa8\xce\x8a\xd1\xad\xbf_\xd6\x99\x89.\x9f\xcb\xbfm\xff\x17M\xd1\xe3\xc0?\x82\x98\x83\xfb\xcd\x97\xf3?\xad(p\xf2\xf8a\xda\xbfQs(\xd6"\xf7\xe3\xbf\x8c\x19\xcd\x13\xca\xe2\xd7?\x1b!D.\x93\xf8\xb6\xbf\xdaR!\xfb\x9aw\xe0\xbfi\x18\xd4\x16\xb4\xa7\xe7?@u\xc25\x7fp\xe0\xbf\xc6)\xdd\x0e\x98q\xb9?\x99\xce1\xearF\xe8?\xedU\xa1\xd7&V\xf3?\xf2\x04\xe7\x00\r5\xcf?\x13*B\tl\x94\xf4?'
p48
tp49
basS'strict'
p50
I00
sS'readonly'
p51
I00
sS'type'
p52
g0
(ctheano.tensor.type
TensorType
p53
g2
Ntp54
Rp55
(dp56
S'broadcastable'
p57
(I00
I00
tp58
sS'dtype'
p59
S'float64'
p60
sS'numpy_dtype'
p61
g45
sS'sparse_grad'
p62
I00
sg32
NsbsS'allow_downcast'
p63
Nsbsg32
NsS'owner'
p64
Nsg52
g55
sb.ccopy_reg
_reconstructor
p0
(ctheano.tensor.sharedvar
TensorSharedVariable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'auto_name'
p6
S'auto_19853'
p7
sS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(lp14
(S'DNNreasoner.py'
p15
I204
S'<module>'
p16
S'dnnreasoner = DNNreasoner()'
p17
tp18
a(S'DNNreasoner.py'
p19
I40
S'__init__'
p20
S'self.initialize()'
p21
tp22
a(S'DNNreasoner.py'
p23
I90
S'initialize'
p24
S'self.bias_layer3 = theano.shared(numpy.zeros(self.nc, dtype=theano.config.floatX))'
p25
tp26
aasbsS'container'
p27
g0
(ctheano.gof.link
Container
p28
g2
Ntp29
Rp30
(dp31
S'name'
p32
NsS'storage'
p33
(lp34
cnumpy.core.multiarray
_reconstruct
p35
(cnumpy
ndarray
p36
(I0
tp37
S'b'
p38
tp39
Rp40
(I1
(I10
tp41
cnumpy
dtype
p42
(S'f8'
p43
I0
I1
tp44
Rp45
(I3
S'<'
p46
NNNI-1
I-1
I0
tp47
bI00
S'\xbd_\x1dX%\xe1\x03@wY\xaa\xbb\xb9K\x03@\x00\x00\x00\x00\x00\x00\x00\x00\xf1;\x05\xba^\x14\xfe?\xd8uk\xebj\x07\x01@\xf7\x137\xbb\xe4\x87\xf9?\x7fx-\xc1\xa5\x04\xb6\xbf\xda\xf5\xaf\x07\xa7\x02\x03@#!\xc6`G\xef\xff?\t\x0f\xf8iO\x8d\x01@'
p48
tp49
basS'strict'
p50
I00
sS'readonly'
p51
I00
sS'type'
p52
g0
(ctheano.tensor.type
TensorType
p53
g2
Ntp54
Rp55
(dp56
S'broadcastable'
p57
(I00
tp58
sS'dtype'
p59
S'float64'
p60
sS'numpy_dtype'
p61
g45
sS'sparse_grad'
p62
I00
sg32
NsbsS'allow_downcast'
p63
Nsbsg32
NsS'owner'
p64
Nsg52
g55
sb.